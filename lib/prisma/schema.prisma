generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("MIGRATE_DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  MODERATOR
}

model Moderator {
  id      Int    @id @default(autoincrement())
  address String
  role    Role
  Forum   Forum  @relation("ForumToModerator", fields: [forum], references: [id])
  forum   String
}

enum Rule {
  Token
  NFT
  Pass
  AdditionalSigner
}

enum Operator {
  AND
  OR
  NOT
}

model Gate {
  id       Int      @id @default(autoincrement())
  amount   BigInt
  address  String[]
  ruleType Rule
  operator Operator
  Forum    Forum    @relation("ForumToGate", fields: [forum], references: [id])
  forum    String
}

model Forum {
  id            String      @id @unique
  admin         String
  config        String      @unique
  namespace     String?     @unique
  displayName   String?
  description   String?
  links         Json?
  icon          String?
  banner        String?
  totalCapacity BigInt
  Gates         Gate[]      @relation("ForumToGate")
  Moderators    Moderator[] @relation("ForumToModerator")
  Posts         Post[]      @relation("ForumToPost")

  @@index(fields: [namespace, displayName])
}

model Award {
  id               String  @id @unique
  amount           BigInt
  authority        String
  collectionMint   String
  merkleTree       String
  name             String
  description      String?
  image            String
  enabled          Boolean @default(false)
  Matching         Award[] @relation("MatchingAward")
  MatchingRelation Award[] @relation("MatchingAward")

  @@index(fields: [name])
}

enum NotificationType {
  Award
  Claim
}

model Notification {
  id        String           @id @unique
  user      String
  type      NotificationType
  title     String
  body      String
  meta      Json?
  createdAt BigInt

  @@index(fields: [user])
}

enum PostType {
  TEXT
  IMAGE
  LINK
}

model Post {
  id        String     @id @unique
  author    String
  Author    User       @relation("UserToPost", fields: [author], references: [id])
  title     String
  body      String?
  uri       String
  nsfw      Boolean    @default(false)
  hash      String?
  postType  PostType   @default(TEXT)
  createdAt BigInt
  editedAt  BigInt?
  nonce     BigInt
  awards    Json?
  points    BigInt     @default(0)
  forum     String
  Forum     Forum      @relation("ForumToPost", fields: [forum], references: [id])
  Comments  Comment[]  @relation("PostToComment")
  Votes     PostVote[] @relation("PostToVote")

  @@index(fields: [author, title, createdAt(sort: Desc), points, forum])
}

model Comment {
  id        String        @id @unique
  author    String
  Author    User          @relation("UserToComment", fields: [author], references: [id])
  body      String
  uri       String
  nsfw      Boolean       @default(false)
  hash      String?
  createdAt BigInt
  editedAt  BigInt?
  nonce     BigInt
  awards    Json?
  points    BigInt        @default(0)
  post      String
  Post      Post          @relation("PostToComment", fields: [post], references: [id])
  parent    String?
  Parent    Comment?      @relation("CommentToParent", fields: [parent], references: [id])
  Children  Comment[]     @relation("CommentToParent")
  Votes     CommentVote[] @relation("CommentToVote")

  @@index(fields: [author, createdAt(sort: Desc), points, post, parent])
}

model User {
  id       String    @id @unique
  name     String?   @unique
  mint     String?
  avatar   String?
  Posts    Post[]    @relation("UserToPost")
  Comments Comment[] @relation("UserToComment")

  @@index(fields: [name])
}

enum VoteType {
  UP
  DOWN
}

model CommentVote {
  user    String
  comment String
  Comment Comment  @relation("CommentToVote", fields: [comment], references: [id])
  vote    VoteType

  @@id([user, comment])
}

model PostVote {
  user String
  post String
  Post Post     @relation("PostToVote", fields: [post], references: [id])
  vote VoteType

  @@id([user, post])
}
