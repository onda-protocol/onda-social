generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("MIGRATE_DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  MODERATOR
}

model Moderator {
  id      Int    @id @default(autoincrement())
  address String
  role    Role
  Forum   Forum  @relation("ForumToModerator", fields: [forum], references: [id])
  forum   String
}

enum Rule {
  Token
  NFT
  Pass
  AdditionalSigner
}

enum Operator {
  AND
  OR
  NOT
}

model Gate {
  id       Int      @id @default(autoincrement())
  amount   BigInt
  address  String[]
  ruleType Rule
  operator Operator
  Forum    Forum    @relation("ForumToGate", fields: [forum], references: [id])
  forum    String
}

model Forum {
  id            String      @id @unique
  admin         String
  config        String      @unique
  namespace     String?     @unique
  displayName   String?
  description   String?
  links         Json?
  icon          String?
  banner        String?
  totalCapacity BigInt
  Gates         Gate[]      @relation("ForumToGate")
  Moderators    Moderator[] @relation("ForumToModerator")
  Posts         Post[]      @relation("ForumToPost")
}

model Award {
  id             String  @id @unique
  amount         BigInt
  authority      String
  collectionMint String
  merkleTree     String
  name           String
  description    String?
  image          String
}

enum PostType {
  TEXT
  IMAGE
  LINK
}

model Post {
  id        String    @id @unique
  author    String
  Author    User      @relation("UserToPost", fields: [author], references: [id])
  title     String
  body      String?
  uri       String
  nsfw      Boolean   @default(false)
  hash      String?
  postType  PostType  @default(TEXT)
  createdAt BigInt
  editedAt  BigInt?
  nonce     BigInt
  awards    Json?
  points    BigInt    @default(0)
  forum     String
  Forum     Forum     @relation("ForumToPost", fields: [forum], references: [id])
  Comments  Comment[] @relation("PostToComment")
}

model Comment {
  id        String    @id @unique
  author    String
  Author    User      @relation("UserToComment", fields: [author], references: [id])
  body      String
  uri       String
  nsfw      Boolean   @default(false)
  hash      String?
  createdAt BigInt
  editedAt  BigInt?
  nonce     BigInt
  awards    Json?
  points    BigInt    @default(0)
  post      String
  Post      Post      @relation("PostToComment", fields: [post], references: [id])
  parent    String?
  Parent    Comment?  @relation("CommentToParent", fields: [parent], references: [id])
  Children  Comment[] @relation("CommentToParent")
}

model User {
  id       String    @id @unique
  name     String?
  mint     String?
  avatar   String?
  Posts    Post[]    @relation("UserToPost")
  Comments Comment[] @relation("UserToComment")
}
